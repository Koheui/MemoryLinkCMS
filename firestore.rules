rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    // Memories can be read if they are active, or if the user is the owner.
    // Writes are only allowed for owners.
    match /memories/{memoryId} {
      allow read: if resource.data.status == 'active' || isOwner(resource.data.ownerUid);
      allow create: if isOwner(request.resource.data.ownerUid);
      allow update, delete: if isOwner(resource.data.ownerUid);
    }

    // Assets can only be accessed by their owner.
    match /assets/{assetId} {
      allow read, create, update, delete: if isOwner(request.resource.data.ownerUid) || isOwner(resource.data.ownerUid);
    }

    // Orders have more complex rules.
    match /orders/{orderId} {
      // Allow read for owner
      allow get: if isOwner(resource.data.userUid);
      
      // Allow list for owner. Also allow querying by email for the claim process.
      allow list: if (request.query.limit <= 30 && isOwner(request.query.userUid)) || 
                     (request.auth != null && request.query.email == request.auth.token.email);

      // Anyone can create an order (for admin/invitation flow)
      // The userUid can be null initially.
      allow create: if true;
      
      // Update/delete is for owner only.
      allow update, delete: if isOwner(resource.data.userUid);
    }
  }
}
