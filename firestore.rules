rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    match /users/{uid} {
      allow read, write: if isOwner(uid) || isAdmin();
    }

    match /memories/{memoryId} {
      allow get: if isOwner(resource.data.ownerUid) || isAdmin();
      allow list: if isOwner(request.query.resource.data.ownerUid) || isAdmin();
      allow create, update, delete: if isOwner(request.resource.data.ownerUid) || isAdmin();

      // Allow owner to read/write their own blocks
      match /blocks/{blockId} {
        allow read, write: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
      }

      // Allow owner to read/write their own assets (subcollection)
      match /assets/{assetId} {
        allow read, write: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
      }
    }
    
    // This top-level assets collection is not used in the new flow, but kept for safety.
    match /assets/{assetId} {
      allow read, write: if isOwner(resource.data.ownerUid) || isAdmin();
    }

    match /orders/{orderId} {
      allow read, write: if isAdmin();
    }

    match /publicPages/{pageId} {
      allow read: if true;
      allow write: if false; 
    }

    match /publicPages/{pageId}/blocks/{blockId} {
      allow read: if true;
      allow write: if false;
    }
  }
}
