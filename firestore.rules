rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() { 
      return request.auth != null; 
    }
    function isOwner(uid) { 
      return isSignedIn() && request.auth.uid == uid; 
    }
    function isAdmin() { 
      return isSignedIn() && request.auth.token.role == 'admin'; 
    }

    // Users can read/write their own profile
    match /users/{uid} {
      allow read, write: if isOwner(uid) || isAdmin();
    }

    // Memories can be read/written by their owner or an admin.
    // This single rule now protects the document and its 'blocks' array field.
    match /memories/{memoryId} {
      allow read, write: if isOwner(resource.data.ownerUid) || isAdmin();
    }
    
    // Assets are now in a subcollection of a memory, and can be accessed
    // by the owner of the parent memory.
    match /memories/{memoryId}/assets/{assetId} {
      allow read, write: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
    }

    // Orders are admin-only
    match /orders/{orderId} {
      allow read, write: if isAdmin();
    }

    // Public pages are read-only for everyone, and cannot be written by clients.
    match /publicPages/{pageId} {
      allow read: if true;
      allow write: if false;
    }

    // This is now legacy and can be removed in a future cleanup.
    match /publicPages/{pageId}/blocks/{blockId} {
      allow read: if false; 
      allow write: if false;
    }
  }
}
