rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }
    
    function isMemoryOwner(memoryId) {
      return get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid == request.auth.uid;
    }
    
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    match /memories/{memoryId} {
      allow read, write: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
    }

    // This rule allows the owner of a memory to access its subcollection of assets.
    match /memories/{memoryId}/assets/{assetId} {
      allow read, write: if isMemoryOwner(memoryId) || isAdmin();
    }

    match /orders/{orderId} {
      allow read, write: if isAdmin();
    }

    match /publicPages/{pageId} {
      allow read: if true;
      allow write: if false; // Should be written by functions only
    }

    match /publicPages/{pageId}/{subcollection}/{docId} {
      allow read, write: if false; // Should be written by functions only
    }
    
    // Explicitly deny access to root assets collection if not owner
    match /assets/{assetId} {
      allow read, write: if isOwner(resource.data.ownerUid) || isAdmin();
    }
  }
}
