rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    match /memories/{memoryId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.ownerUid) || isAdmin();

      // Allow owner or admin to manage blocks within their memory
      match /blocks/{blockId} {
        allow read, write: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
      }

       // Allow owner or admin to manage assets within their memory
      match /assets/{assetId} {
        allow read, write: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
      }
    }
    
    // This rule allows a user to query all assets they own, regardless of the memory.
    // This is essential for the Media Library feature.
    match /{path=**}/assets/{assetId} {
      allow read: if isOwner(resource.data.ownerUid);
    }
    
    // Orders are admin-only
    match /orders/{orderId} {
      allow read, write: if isAdmin();
    }

    // Public pages are read-only for everyone and cannot be written by clients.
    // This will be managed by Firebase Functions.
    match /publicPages/{pageId} {
      allow read: if true;
      allow write: if false; // Managed by functions
    }
  }
}
