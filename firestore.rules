rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    // Users can only read and write their own document.
    match /users/{uid} {
      allow read, write: if isOwner(uid) || isAdmin();
    }

    // Memories can be created by the owner, and read/written by the owner or an admin.
    match /memories/{memoryId} {
      allow read, update, delete: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
      allow create: if isOwner(request.resource.data.ownerUid);
    }

    // Assets can be read/written by the owner of the memory or an admin.
    match /memories/{memoryId}/assets/{assetId} {
       allow read, write: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
    }

    // Blocks can be read/written by the owner of the memory or an admin.
    match /memories/{memoryId}/blocks/{blockId} {
       allow read, write: if isOwner(get(/databases/$(database)/documents/memories/$(memoryId)).data.ownerUid) || isAdmin();
    }
    
    // Orders can be created by the user, but only read/written by admins afterwards.
    match /orders/{orderId} {
      allow read, update, delete: if isAdmin();
      allow create: if isOwner(request.resource.data.userUid);
    }
    
    // Public pages are read-only for everyone. Writes are not allowed from the client.
    match /publicPages/{pageId} {
      allow read: if true;
      allow write: if false; // Should be written by Functions
    }

    match /publicPages/{pageId}/blocks/{blockId} {
      allow read, write: if false; // Should not be accessed directly
    }
  }
}
