
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Memories: Only owners can access their own data.
    match /memories/{memoryId} {
      allow read: if true; // Public pages need to read this, specific public page logic should handle visibility
      allow list: if isSignedIn() && request.query.where.ownerUid == request.auth.uid;
      allow create, update, delete: if isOwner(resource.data.ownerUid);
    }

    // Assets: Only owners can access their own data.
    match /assets/{assetId} {
      allow read: if true; // Public pages need to read this
      allow list: if isSignedIn() && request.query.where.ownerUid == request.auth.uid;
      allow create, update, delete: if isOwner(resource.data.ownerUid);
    }

    // Orders:
    // - Anyone can create an order (e.g., an admin inviting a user).
    // - Authenticated users can list their own orders, or claim orders matching their email.
    // - Authenticated users can only get, update, or delete their own orders.
    match /orders/{orderId} {
      allow get, update, delete: if isOwner(resource.data.userUid);
      
      // Allow a user to query for orders matching their email to claim them upon signup.
      // This is more secure than allowing a general list read.
      allow list: if isSignedIn() && request.query.where.email == request.auth.token.email;
      
      allow create: if true; // Allows admins to create orders for new customers
    }
  }
}
