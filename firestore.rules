rules_version = '2';

function isSignedIn() {
  return request.auth != null;
}
function isAdmin() {
  return isSignedIn() && request.auth.token.role == 'admin';
}
function isOwner(uid) {
  return isSignedIn() && request.auth.uid == uid;
}
// カスタムクレーム allowTenant とドキュメントの tenant を照合
function sameTenant(memTenant) {
  return request.auth != null && request.auth.token.allowTenant == memTenant;
}

service cloud.firestore {
  match /databases/{db}/documents {

    // Users（自分 or 管理者のみ）
    match /users/{uid} {
      allow read, write: if isOwner(uid) || isAdmin();
    }

    // 招待（Functions管理のみ）
    match /invitations/{memoryId} {
      allow read: if false;
      allow write: if isAdmin();
    }

    // Memories（オーナー＆同一テナントのみ）
    match /memories/{memoryId} {
      allow read, write: if isAdmin()
        || (isOwner(resource.data.ownerUid) && sameTenant(resource.data.tenant));

      // 初回クレーム（ownerUid:null → 自分のuid へ）
      allow update: if isSignedIn()
        && resource.data.ownerUid == null
        && request.resource.data.ownerUid == request.auth.uid
        && (resource.data.diff(request.resource.data).changedKeys().hasOnly(["ownerUid"]))
        && (request.auth.token.email != null)
        && (get(/databases/$(db)/documents/invitations/$(memoryId)).data.email
            == request.auth.token.email)
        && (get(/databases/$(db)/documents/invitations/$(memoryId)).data.claimedByUid == null);
    }

    // Assets（memoryId 経由で tenant 照合）
    match /assets/{assetId} {
      allow read, write: if isAdmin()
        || (isOwner(resource.data.ownerUid)
            && sameTenant(get(/databases/$(db)/documents/memories/$(resource.data.memoryId)).data.tenant));
    }

    // 公開ページ（閲覧自由、書込はFunctionsのみ）
    match /publicPages/{pageId} {
      allow read: if true;
      allow write: if false;
    }
    match /publicPages/{pageId}/blocks/{blockId} {
      allow read: if true;
      allow write: if false;
    }
  }
}
